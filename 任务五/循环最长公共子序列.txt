#include <iostream>
#include <vector>
#include <set>
using namespace std;

class Solution{
public:
    int lengthOflongestCommonSequence(string& str1, string& str2){
        int m = str1.length(), n = str2.length();
        if(m == 0 || n == 0)
            return 0;
        dp = vector<vector<int> >(m+1, vector<int>(n+1, 0));
        for(int i = 1; i < m+1; ++i){
            for(int j = 1; j < n+1; ++j){
                if(str1[i-1] == str2[j-1])
                    dp[i][j] = dp[i-1][j-1] + 1;
                else
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
            }
        }
        return dp[m][n];
    }
    // 找出所有的LCS的序列
    // 这里形参lcs_str不可以为引用，这里需要每次调用lcs_str都重新生成一个对象
    void PrintAllLCS(string& str1, string& str2, int i, int j, string lcs_str){
        while(i > 0 && j > 0){
            if(str1[i-1] == str2[j-1]){
                lcs_str = str1[i-1] + lcs_str;
                --i;
                --j;
            }
            else{
                if(dp[i-1][j] > dp[i][j-1])  //向左走
                    --i;
                else if(dp[i-1][j] < dp[i][j-1])  //向上走
                    --j;
                //此时向上向右均为LCS的元素
                else{
                    PrintAllLCS(str1, str2, i-1, j, lcs_str);
                    PrintAllLCS(str1, str2, i, j-1, lcs_str);
                    return;
                }
            }
        }
        all_lcs.insert(lcs_str);
    }
    vector<vector<int> > dp;
    set<string> all_lcs;
};

int main()
{
    string s1 = "abcfbc";
    string s2 = "abfcab";
    Solution fir;
    string lcs_str;
    int res = fir.lengthOflongestCommonSequence(s1, s2);
    cout << res << endl;
    fir.PrintAllLCS(s1, s2, s1.length(), s2.length(), lcs_str);
    set<string>::iterator iter = fir.all_lcs.begin();
	while (iter != fir.all_lcs.end()) {
		cout << *iter++ << endl;
	}
    return 0;
}
